#+title: Árbol generador de menor costo

#+options: toc:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstalias{ipayton}{payton}
#+latex_header: \lstset{basicstyle=\small\ttfamily, frame=single}

#+latex_header: \usepackage{bera}

#+property: header-args:ipython :exports both :cache yes :session arbol :results raw drawer

* Problema

Supongamos que a cada arista de la gáfica completa \(k_{n}\) se le
asigna un valor ("peso"). Si a cada subgráfica le asignamos un peso
igual a la suma de los pesos de sus aristas, consideraremos el
problema de encontrar el árbol generador de menor peso.

* Algoritmo de Kruskal

El cual consiste en escoger sucesivamente la arista más barata que no
forme ciclo con la gráfica determinada por las aristas escogidas
previamente. (si en algún momento hay varias aristas más baratas y
factibles, se escoge cualquiera).

* Implementación en Python 

Para comenzar hay que importar las bibliotecas necesarias. 

#+begin_src ipython
import networkx as nx
import matplotlib.pyplot as plt 
from random import random as random
from scipy.spatial.distance import euclidean
#+end_src

#+RESULTS[042b2d9cccdf11798c868694034d5fd84346d202]:
:results:
# Out[1]:
:end:

A continuación definirmeos una gráfica aleatoria con 10 vértices.

#+begin_src ipython
g=nx.gnp_random_graph(10,0.2)
#+end_src

#+RESULTS[6cb25f08ff5c48547b3f4dfee8e011fbbf4547c2]:
:results:
# Out[2]:
:end:

Veremos si nuestra gráfica es un bosque. 

#+begin_src ipython
nx.is_forest(g), nx.is_connected(g)
#+end_src

#+RESULTS[e7d1dbb3a296c52111081a2873e11b0c5e1bcb99]:
:results:
# Out[3]:
: (False, False)
:end:

A continuación dibujaremos esta gráfica.

#+begin_src ipython
nx.draw(g,with_labels=True)
#+end_src

#+RESULTS[40b6f975e2784846b3266e3879b6ffb2f4432ce6]:
:results:
# Out[19]:
[[file:./obipy-resources/2166vKB.png]]
:end:


Calcularemos las componentes conexas de esta gráfica.

#+begin_src ipython
list(nx.connected_components(g))
#+end_src

#+RESULTS[fd43bac86ab4e6adb6ece858cb2c922a37acadb0]:
:results:
# Out[20]:
: [{0, 1, 2, 5, 6}, {3}, {4, 9}, {7}, {8}]
:end:

Veamos la componente que contiene al vértice 2.

#+begin_src ipython
nx.node_connected_component(g,2)
#+end_src

#+RESULTS[5dbb8a5e23a82b97e43b14101c8f6ff99694deeb]:
:results:
# Out[21]:
: {0, 1, 2, 5, 6}
:end:

A continuación dibujaremos un árbol escogido aleatoriamente.

#+begin_src ipython
t=nx.random_tree(10)
nx.draw(t,with_labels=True)
#+end_src

#+RESULTS[7198899532f119d85be7a7b4da483cf334eb4b66]:
:results:
# Out[22]:
[[file:./obipy-resources/21668UH.png]]
:end:

* Puntos en el plano

Si tenemos dos listas de números de tamaño =n=, podemos dibujar =n=
puntos en el plano, tomando las coordenadas =x= de la priera lista y
las coordenadas =y= de la segunda.

#+begin_src ipython
plt.plot([1,1,2],[1,2,3],'bx')
plt.axis([0,3,0,4])
plt.show()
#+end_src

#+RESULTS[a2473dc10d4388557d58b145c3b398832095523d]:
:results:
# Out[4]:
[[file:./obipy-resources/2444vTn.png]]
:end:

Vamos a definir una función que dibuje n puntos en el plano
aleatoriamente.

#+begin_src ipython
def puntos_en_el_plano(n):
    listax=[]
    listay=[]
    for i in range(n):
        listax.append(random())
        listay.append(random())
    return listax, listay 
#+end_src

#+RESULTS[b043cc337169de548942877e29716715530b47b4]:
:results:
# Out[5]:
:end:

#+begin_src ipython
puntos=puntos_en_el_plano(50)
#+end_src

#+RESULTS[9ff8894398a2a07a6c3e77984fe46197b54683d8]:
:results:
# Out[6]:
:end:

#+begin_src ipython
plt.plot(*puntos, 'ro')
plt.show()
#+end_src

#+RESULTS[3e875b45815176da72d413ae26cf591eba8c559f]:
:results:
# Out[7]:
[[file:./obipy-resources/24448dt.png]]
:end:

Hagamos una función tal que a partir de dos listas produzca el dibujo:

#+begin_src ipython
def dibujo_puntos(listax,listay):
    plt.plot(listax, listay, 'ro')
    plt.axis([-0.1,1.1,-0.1,1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[2a39b4b48fa54c16ca027a04b31991530ef660b7]:
:results:
# Out[8]:
:end:

#+begin_src ipython
dibujo_puntos(*puntos)
#+end_src

#+RESULTS[274d1e4a2e4c1e9a72c9f464a39ff8637dd52977]:
:results:
# Out[34]:
[[file:./obipy-resources/2166Xcy.png]]
:end:

* Distancia Euclidiana

#+begin_src ipython
a=(0,0)
b=(3,5)
euclidean(a,b)
#+end_src

#+RESULTS[6b36117a6fb1535a322de5ff5e76a41de24bb57d]:
:results:
# Out[9]:
: 5.830951894845301
:end:

* Gráfica con pesos
  SCHEDULED: <2019-10-10 jue>

En =networkx= se pueden considerar gráficas donde cada arista tiene un
peso, por ejemplo:

#+begin_src ipython
g=nx.Graph()
g.add_nodes_from(["a","b","c"])
g.add_weighted_edges_from([("a","b",2),("a","c",0.5)])
position=nx.spring_layout(g)
nx.draw_networkx_edge_labels(g,pos=position)
nx.draw(g,with_labels=True, pos=position)
#+end_src

#+RESULTS[0c1bd82275b1a0f31c316b44a4ad188a90b3707f]:
:results:
# Out[10]:
[[file:./obipy-resources/2444Joz.png]]
:end:

Definiremos ahora una función que dadas dos listas de números,
produzca una gráfica con pesos donde los vértices sean los puntos y el
peso entre dos puntos cualesquiera sea la distancia euclidiana. 

#+begin_src ipython
def grafica_euclidiana(listax, listay):
 G=nx.Graph()
 n=len(listax)
 vertices=[]
 for i in range(n):
     vertices.append((listax[i], listay[i]))
 aristas=[]
 for i in range(n):
     for j in range(i+1,n):
         u=vertices[i]
         v=vertices[j]
         aristas.append((u,v,euclidean(u,v)))
 G.add_nodes_from(vertices)
 G.add_weighted_edges_from(aristas)
 return G
#+end_src

#+RESULTS[a8607828c5409db6e555e220fa9f857f2a7b6d91]:
:results:
# Out[13]:
:end:

#+begin_src ipython
G=grafica_euclidiana(*puntos)
#+end_src

#+RESULTS[7ca89f7503d75ea5b20128b952cc415c7ed7d317]:
:results:
# Out[14]:
:end:

#+begin_src ipython
def arbol_menor_costo(G):
    T=nx.Graph()
    T.add_nodes_from(G)
    aristas=list(G.edges(data=True))
    aristas=sorted(aristas, key=lambda e: -e[2]['weight'])
    while len(T.edges())< len(G)-1:
        e=aristas.pop()
        if not(e[0] in nx.node_connected_component(T,e[1])):
            T.add_edge(e[0],e[1])
    return T
#+end_src

#+RESULTS[d9d57f06523ba9996a2a34f8f1699d907477afc9]:
:results:
# Out[26]:
:end:

#+begin_src ipython
plt.figure(figsize=(10,10))

t=arbol_menor_costo(G)
nx.draw(t)
#+end_src

#+RESULTS[54d342782cb8c890124fb0c0958d4960f018462a]:
:results:
# Out[27]:
[[file:./obipy-resources/24447xC.png]]
:end:

#+begin_src ipython
plt.figure(figsize=(10,10))

for v in t.nodes():
    plt.plot(v[0], v[1], 'ro')
    
for e in t.edges():
    p1=e[0]
    p2=e[1]
    plt.plot([p1[0],p2[0]],[p1[1],p2[1]],color='blue')
plt.axis([-0.1,1.1,-0.1,1.1])
plt.gca().set_aspect('equal')

plt.show()
#+end_src

#+RESULTS[1ffebb72e3ef7e65023a844bafcee89a6a6cc649]:
:results:
# Out[29]:
[[file:./obipy-resources/2444VGP.png]]
:end:

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:

